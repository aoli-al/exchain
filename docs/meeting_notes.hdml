<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Meeting Notes</title>
  <style>
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header id="title-block-header">
<h1 class="title">Meeting Notes</h1>
</header>
<h1 id="sep-18">Sep 18</h1>
<h2 id="progress">Progress</h2>
<ul>
<li>Goal: Enabling taint propagation dynamically</li>
<li>Idea: add if branch in each method</li>
</ul>
<div class="sourceCode" id="cb1"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">// origin version</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>    <span class="kw">public</span> <span class="fu">foo</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>        <span class="co">// impl</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="#cb1-7"></a></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="co">// current version</span></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>    <span class="kw">public</span> <span class="fu">foo</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>        <span class="cf">if</span> <span class="op">(</span>enabled<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>            <span class="co">// instrumented impl</span></span>
<span id="cb1-13"><a href="#cb1-13"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-14"><a href="#cb1-14"></a>            <span class="co">// origin impl</span></span>
<span id="cb1-15"><a href="#cb1-15"></a>        <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>    <span class="op">}</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="op">}</span></span></code></pre></div>
<ul>
<li>Implementation is done.</li>
<li>We instrument Fineract and tested the implementation using
integration tests.</li>
<li>All tests are passed (with/without taint propagation).
<ul>
<li>Overhead measurement is pending.</li>
</ul></li>
<li>Enable taint propagation in the middle of program execution makes
the application crash!</li>
</ul>
<h2 id="examples">Examples</h2>
<p>Origin Program:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="bu">Object</span> a<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="kw">public</span> <span class="fu">Foo</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>        a <span class="op">=</span> <span class="kw">new</span> <span class="dt">int</span><span class="op">[</span><span class="dv">3</span><span class="op">];</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="dt">void</span> <span class="fu">test</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>        <span class="op">((</span><span class="dt">int</span><span class="op">[])</span> a<span class="op">)[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="op">}</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="op">}</span></span></code></pre></div>
<p>Instrumented Program:</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>    <span class="bu">Object</span> a<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>    Taint a_taint<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>    <span class="kw">public</span> <span class="fu">Foo</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>        a <span class="op">=</span> <span class="kw">new</span> <span class="fu">TaggedArray</span><span class="op">(</span><span class="kw">new</span> <span class="dt">int</span><span class="op">[</span><span class="dv">3</span><span class="op">]);</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>    <span class="op">}</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>    <span class="dt">void</span> <span class="fu">test</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>        <span class="op">((</span>TaggedArray<span class="op">)</span> a<span class="op">).</span><span class="fu">put</span><span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>    <span class="op">}</span></span>
<span id="cb3-10"><a href="#cb3-10"></a><span class="op">}</span></span></code></pre></div>
<p>Problem:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1"></a><span class="dt">void</span> <span class="fu">run</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>    tracingEnabled <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>    Foo foo <span class="op">=</span> <span class="kw">new</span> <span class="fu">Foo</span><span class="op">();</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    tracingEnabled <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>    foo<span class="op">.</span><span class="fu">test</span><span class="op">();</span></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="op">}</span></span></code></pre></div>
<h2 id="ideas">Ideas</h2>
<ul>
<li>What if we only taint objects
<ul>
<li>Performance impact is low</li>
<li>We cannot handle:
<ul>
<li>local null pointers</li>
<li>local variables with primitive types</li>
</ul></li>
</ul></li>
</ul>
<p>Origin:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>    <span class="dt">void</span> <span class="fu">localVars</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>        <span class="dt">int</span> a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>        <span class="bu">Object</span> b <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>        Foo c <span class="op">=</span> <span class="kw">new</span> <span class="fu">Foo</span><span class="op">();</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>    <span class="op">}</span></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="op">}</span></span></code></pre></div>
<p>Fully Instrumented:</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>    Taint thisTag<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>    <span class="dt">void</span> <span class="fu">localVars</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>        <span class="dt">int</span> a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>        Taint a_tag<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>        <span class="bu">Object</span> b <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>        Taint b_tag<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>        Foo c <span class="op">=</span> <span class="kw">new</span> <span class="fu">Foo</span><span class="op">();</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>        Taint c_tag<span class="op">;</span> <span class="co">// taint the reference.</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>        c<span class="op">.</span><span class="fu">thisTag</span> <span class="op">=</span> <span class="st">&quot;some tag&quot;</span><span class="op">;</span> <span class="co">// taint the heap object.</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>    <span class="op">}</span></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="op">}</span></span></code></pre></div>
<p>Partially Instrumented:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">public</span> <span class="kw">class</span> Foo <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>    Taint thisTag<span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="dt">void</span> <span class="fu">localVars</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-4"><a href="#cb7-4"></a>        <span class="dt">int</span> a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>        <span class="bu">Object</span> b <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>        Foo c <span class="op">=</span> <span class="kw">new</span> <span class="fu">Foo</span><span class="op">();</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>        c<span class="op">.</span><span class="fu">thisTag</span> <span class="op">=</span> <span class="st">&quot;some tag&quot;</span><span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>    <span class="op">}</span></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="op">}</span></span></code></pre></div>
<p>Case Study:</p>
<p>Can handle partially:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1"></a><span class="dt">void</span> <span class="fu">setup</span><span class="op">(</span>HTTPClient client<span class="op">,</span> <span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>    Cert cert <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>        cert <span class="op">=</span> <span class="fu">getCert</span><span class="op">();</span> <span class="co">// throws RuntimeException</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>        <span class="co">// We cannot taint Cert object because it is null.</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-7"><a href="#cb8-7"></a>        LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="st">&quot;Cert failure&quot;</span><span class="op">);</span></span>
<span id="cb8-8"><a href="#cb8-8"></a>    <span class="op">}</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>    <span class="co">// Other initialization logic</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>        client<span class="op">.</span><span class="fu">setCert</span><span class="op">(</span>cert<span class="op">.</span><span class="fu">getData</span><span class="op">());</span> <span class="co">// throws NPE</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>        <span class="co">// We can taint Client object here</span></span>
<span id="cb8-13"><a href="#cb8-13"></a>        <span class="co">// client.setTaint(&quot;NPE&quot;)</span></span>
<span id="cb8-14"><a href="#cb8-14"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-15"><a href="#cb8-15"></a>        LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="st">&quot;client failure&quot;</span><span class="op">);</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>    <span class="op">}</span></span>
<span id="cb8-17"><a href="#cb8-17"></a><span class="op">}</span></span>
<span id="cb8-18"><a href="#cb8-18"></a><span class="dt">void</span> <span class="fu">sendRequest</span><span class="op">(</span>HTTPClient client<span class="op">,</span> <span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-19"><a href="#cb8-19"></a>    <span class="fu">setup</span><span class="op">(</span>client<span class="op">);</span></span>
<span id="cb8-20"><a href="#cb8-20"></a>    client<span class="op">.</span><span class="fu">sentRequest</span><span class="op">(</span>r<span class="op">);</span> <span class="co">// throws RequestException</span></span>
<span id="cb8-21"><a href="#cb8-21"></a>    <span class="co">// client.getTaint()</span></span>
<span id="cb8-22"><a href="#cb8-22"></a><span class="op">}</span></span></code></pre></div>
<p>Cannot handle:</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1"></a><span class="dt">void</span> <span class="fu">sendRequest</span><span class="op">(</span><span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>    <span class="dt">int</span> retry <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="cf">while</span> <span class="op">(</span>retry <span class="op">&lt;</span> MAX_RETRY<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>        <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>            <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">Exception1</span><span class="op">();</span></span>
<span id="cb9-6"><a href="#cb9-6"></a>            <span class="cf">break</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>        <span class="op">}</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>        <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>            retry<span class="op">++;</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>            LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span>e<span class="op">);</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>        <span class="op">}</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>    <span class="op">}</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>    <span class="cf">if</span> <span class="op">(</span>retry <span class="op">&gt;=</span> MAX_RETRY<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-14"><a href="#cb9-14"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">TooManyRetryException</span><span class="op">();</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>    <span class="op">}</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="op">}</span></span></code></pre></div>
<p>More complicated:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">class</span> Loader <span class="op">{</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>    <span class="dt">int</span> totalCommits <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="dt">void</span> <span class="fu">recoverRequest</span><span class="op">(</span>Checkpoint checkpoints<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>        <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>            <span class="cf">for</span> <span class="op">(</span>commit<span class="op">:</span> checkpoints<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>                <span class="cf">if</span> <span class="op">(</span>condition<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>                    <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">OOMException</span><span class="op">();</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>                <span class="op">}</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>                totalCommits<span class="op">++;</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>            <span class="op">}</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>        <span class="op">}</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>        <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-13"><a href="#cb10-13"></a>            LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span>e<span class="op">);</span></span>
<span id="cb10-14"><a href="#cb10-14"></a>        <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15"></a>    <span class="op">}</span></span>
<span id="cb10-16"><a href="#cb10-16"></a></span>
<span id="cb10-17"><a href="#cb10-17"></a>    <span class="dt">void</span> <span class="fu">commitRequest</span><span class="op">(</span><span class="dt">int</span> id<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>        <span class="fu">checkId</span><span class="op">(</span>id<span class="op">,</span> totalCommits<span class="op">);</span></span>
<span id="cb10-19"><a href="#cb10-19"></a>        <span class="co">//...</span></span>
<span id="cb10-20"><a href="#cb10-20"></a>        totalCommits<span class="op">++;</span></span>
<span id="cb10-21"><a href="#cb10-21"></a>    <span class="op">}</span></span>
<span id="cb10-22"><a href="#cb10-22"></a></span>
<span id="cb10-23"><a href="#cb10-23"></a>    <span class="dt">void</span> <span class="fu">checkId</span><span class="op">(</span><span class="dt">int</span> id<span class="op">,</span> <span class="dt">int</span> totalCommits<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-24"><a href="#cb10-24"></a>        <span class="cf">if</span> <span class="op">(</span>id <span class="op">!=</span> totalCommits<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-25"><a href="#cb10-25"></a>            <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">InconsistentIdException</span><span class="op">();</span></span>
<span id="cb10-26"><a href="#cb10-26"></a>        <span class="op">}</span></span>
<span id="cb10-27"><a href="#cb10-27"></a>    <span class="op">}</span></span>
<span id="cb10-28"><a href="#cb10-28"></a><span class="op">}</span></span></code></pre></div>
<p>Two challenges:</p>
<ul>
<li>Identify branch condition: <code>id != totalCommits+1</code></li>
<li>totalCommits is passed as a local variable and the taint is
missing.</li>
</ul>
<h1 id="sep-26">Sep 26</h1>
<h2 id="revisit">Revisit</h2>
<p>Identify the causal relationships among exceptions.</p>
<ul>
<li>Input: source code/bytecode of the system</li>
<li>Output: Causality chain of system internal exceptions</li>
</ul>
<h2 id="related-works">Related Works</h2>
<ul>
<li><p>Use logs to disambiguate call paths of executions. [<a
href="http://log20.dsrg.utoronto.ca/log20_sosp17_paper.pdf">OSDI 14</a>,
<a
href="https://www.usenix.org/system/files/conference/atc18/atc18-luo.pdf">ATC
18</a>, <a
href="https://web.eecs.umich.edu/~weimerw/2018-481/readings/pathprofile.pdf">MICRO-96</a>]</p>
<ul>
<li>Focus on execution trace reconstruction when failure happens.</li>
<li>Different output: Execution traces are not sufficient to debug the
root cause of the system when the exceptions are thrown across
requests.</li>
</ul></li>
<li><p>Find logs that are related to root cause of failures. [<a
href="http://web.cs.ucla.edu/~dogga/publications/mlsys22.pdf">MLSys
22</a>]</p>
<ul>
<li>Use machine learning to generate <strong>queries</strong> for
finding root causes in distributed systems.</li>
<li>Different output: User may not log sufficient data to help
developers to identify
<ul>
<li>Counter point: what if we log all exceptions automatically, can we
use such techniques to identify all exceptions that are related to the
failure?</li>
<li>Such tool cannot tell the causality among exceptions.</li>
</ul></li>
</ul></li>
<li><p>Distributed tracing. [<a
href="https://www.usenix.org/conference/nsdi-07/x-trace-pervasive-network-tracing-framework">NSDI
07</a>, <a href="https://dl.acm.org/doi/10.1145/2815400.2815415">OSDI
13</a>]</p>
<ul>
<li>Different problem: try to construct the causal paths in network
protocols.</li>
<li>They complement each other.</li>
</ul></li>
<li><p>Monitoring. [<a
href="https://www.cs.jhu.edu/~huang/paper/omegagen-nsdi20-preprint.pdf">NSDI
20</a>]</p>
<ul>
<li>Monitor all sensitive API calls in applications.</li>
<li>High overhead.</li>
<li>Do not show the causality among exceptions.</li>
</ul></li>
<li><p>https://valgrind.org/docs/origin-tracking2007.pdf</p></li>
</ul>
<h2 id="high-level-design">High Level Design</h2>
<p>Given an exception <span class="math inline"><em>e</em></span> we
want to compute:</p>
<ul>
<li>source variables <span
class="math inline"><em>S</em><sub><em>e</em></sub></span>: a set of
variables that cause the exception <span
class="math inline"><em>e</em></span>.</li>
<li>affected variables <span
class="math inline"><em>A</em><sub><em>e</em></sub></span>: a set
variables whose values are affected by the exception <span
class="math inline"><em>e</em></span>.</li>
<li>The propagation of <span
class="math inline"><em>A</em><sub><em>e</em></sub></span>: how affected
variables affect the state of the program.</li>
</ul>
<p>We define:</p>
<ul>
<li>Exception <span class="math inline"><em>e</em><sub>1</sub></span> is
caused by exception <span
class="math inline"><em>e</em><sub>2</sub></span> if and only if the
intersection of <span
class="math inline"><em>S</em><sub><em>e</em><sub>1</sub></sub></span>
and <span
class="math inline"><em>A</em><sub><em>e</em><sub>2</sub></sub></span>
is not empty.</li>
</ul>
<p>Example:</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1"></a><span class="dt">void</span> <span class="fu">setup</span><span class="op">(</span>HTTPClient client<span class="op">,</span> <span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>    Cert cert <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>        cert <span class="op">=</span> <span class="fu">getCert</span><span class="op">();</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>        LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="st">&quot;Cert failure&quot;</span><span class="op">);</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>    <span class="op">}</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>    <span class="co">// Other initialization logic</span></span>
<span id="cb11-9"><a href="#cb11-9"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>        client<span class="op">.</span><span class="fu">setCert</span><span class="op">(</span>cert<span class="op">.</span><span class="fu">getData</span><span class="op">());</span> <span class="co">// throws NPE</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>        LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="st">&quot;client failure&quot;</span><span class="op">);</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>    <span class="op">}</span></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="op">}</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>Cert <span class="fu">getCert</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>    <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">RuntimeException</span><span class="op">();</span></span>
<span id="cb11-17"><a href="#cb11-17"></a><span class="op">}</span></span>
<span id="cb11-18"><a href="#cb11-18"></a><span class="dt">void</span> <span class="fu">sendRequest</span><span class="op">(</span>HTTPClient client<span class="op">,</span> <span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>    <span class="fu">setup</span><span class="op">(</span>client<span class="op">);</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>    client<span class="op">.</span><span class="fu">sentRequest</span><span class="op">(</span>r<span class="op">);</span> <span class="co">// throws RequestException</span></span>
<span id="cb11-21"><a href="#cb11-21"></a><span class="op">}</span></span></code></pre></div>
<ul>
<li>RuntimeException:16:
<ul>
<li>source var: <code>this</code> or none</li>
<li>affected var: <code>cert</code></li>
</ul></li>
<li>NullPointerException:10
<ul>
<li>source var: <code>cert</code></li>
<li>affected var: <code>client</code></li>
</ul></li>
<li>RequestException:20
<ul>
<li>source var: <code>client</code>, <code>r</code></li>
<li>affected var: <code>client</code></li>
</ul></li>
</ul>
<h2 id="compute-source-variables-s_e">Compute Source Variables <span
class="math inline"><em>S</em><sub><em>e</em></sub></span></h2>
<p>Algorithm:</p>
<ul>
<li>If the exception is NPE
<ul>
<li>Callee is the source variable</li>
</ul></li>
<li>If the exception is OutOfBoundException
<ul>
<li>Callee and arguments are the source variables</li>
</ul></li>
<li>If the exception is an AssertError or the exception is from a throw
instruction
<ul>
<li>Identify the closest branch instruction and its variables are source
variables.</li>
<li>This is a heuristic</li>
</ul></li>
</ul>
<p>Example:</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">class</span> Loader <span class="op">{</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>    <span class="dt">int</span> totalCommits <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3"></a></span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="dt">void</span> <span class="fu">commitRequest</span><span class="op">(</span><span class="dt">int</span> id<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>        <span class="fu">checkId</span><span class="op">(</span>id<span class="op">,</span> totalCommits<span class="op">);</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>        <span class="co">//...</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>        totalCommits<span class="op">++;</span></span>
<span id="cb12-8"><a href="#cb12-8"></a>    <span class="op">}</span></span>
<span id="cb12-9"><a href="#cb12-9"></a></span>
<span id="cb12-10"><a href="#cb12-10"></a>    <span class="dt">void</span> <span class="fu">checkId</span><span class="op">(</span><span class="dt">int</span> id<span class="op">,</span> <span class="dt">int</span> totalCommits<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-11"><a href="#cb12-11"></a>        <span class="cf">if</span> <span class="op">(</span>id <span class="op">!=</span> totalCommits<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-12"><a href="#cb12-12"></a>            <span class="fu">logAndThrowException</span><span class="op">(</span><span class="st">&quot;Inconsistent ID&quot;</span><span class="op">);</span></span>
<span id="cb12-13"><a href="#cb12-13"></a>        <span class="op">}</span></span>
<span id="cb12-14"><a href="#cb12-14"></a>    <span class="op">}</span></span>
<span id="cb12-15"><a href="#cb12-15"></a></span>
<span id="cb12-16"><a href="#cb12-16"></a>    <span class="dt">void</span> <span class="fu">logAndThrowException</span><span class="op">(</span><span class="bu">String</span> message<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-17"><a href="#cb12-17"></a>        Log<span class="op">.</span><span class="fu">error</span><span class="op">(</span>message<span class="op">);</span></span>
<span id="cb12-18"><a href="#cb12-18"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">RuntimeException</span><span class="op">();</span></span>
<span id="cb12-19"><a href="#cb12-19"></a></span>
<span id="cb12-20"><a href="#cb12-20"></a>    <span class="op">}</span></span>
<span id="cb12-21"><a href="#cb12-21"></a><span class="op">}</span></span></code></pre></div>
<p>The source The source variables of <code>RuntimeException</code> are
<code>id</code> and <code>totalCommits</code>.</p>
<h2 id="compute-affected-variables-a_e">Compute Affected Variables <span
class="math inline"><em>A</em><sub><em>e</em></sub></span></h2>
<p>Algorithm:</p>
<ul>
<li>Given an exception <span class="math inline"><em>e</em></span>. Let
<span
class="math inline"><em>A</em><sub><em>e</em></sub> ← ∅</span></li>
<li>for each function in the stack trace:
<ul>
<li>Run the data flow analysis <span
class="math inline"><em>D</em><em>F</em><sub>1</sub></span> to compute
the source values <span
class="math inline"><em>S</em><em>V</em><sub>1</sub></span> of each
variable without exception path.</li>
<li>Run the data flow analysis <span
class="math inline"><em>D</em><em>F</em><sub>2</sub></span> to compute
the source values <span
class="math inline"><em>S</em><em>V</em><sub>2</sub></span> of each
variable with exception path.</li>
<li>For instructions that are only executed in <span
class="math inline"><em>D</em><em>F</em><sub>1</sub></span> and <span
class="math inline"><em>D</em><em>F</em><sub>2</sub></span>
<ul>
<li>If the instruction updates a variable <span
class="math inline"><em>v</em></span> and <span
class="math inline"> <em>S</em><em>V</em><sub>1</sub>[ [<em>v</em>] ] ≠ <em>S</em><em>V</em><sub>1</sub>[ [<em>v</em>] ]</span>:
<ul>
<li><span
class="math inline"><em>A</em><sub><em>e</em></sub> ← <em>A</em><sub><em>e</em></sub> ∪ <em>v</em></span></li>
</ul></li>
<li>If the instruction calls a method of a variable <span
class="math inline"><em>v</em></span>:
<ul>
<li><span
class="math inline"><em>A</em><sub><em>e</em></sub> ← <em>A</em><sub><em>e</em></sub> ∪ <em>v</em></span></li>
</ul></li>
</ul></li>
<li>If the exception is caught in the current function then break</li>
</ul></li>
</ul>
<p>Example:</p>
<p>Let’s only consider the <code>RuntimeException</code> thrown by
<code>getCert</code> method.</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1"></a><span class="dt">void</span> <span class="fu">setup</span><span class="op">(</span>HTTPClient client<span class="op">,</span> <span class="bu">Request</span> r<span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2"></a>    Cert cert <span class="op">=</span> <span class="kw">null</span><span class="op">;</span>                       <span class="co">// cert = null</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>        cert <span class="op">=</span> <span class="fu">getCert</span><span class="op">();</span>                   <span class="co">// cert = invokevirtual getCert</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-6"><a href="#cb13-6"></a>        LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="st">&quot;Cert failure&quot;</span><span class="op">);</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>    <span class="op">}</span></span>
<span id="cb13-8"><a href="#cb13-8"></a><span class="op">}</span></span></code></pre></div>
<ul>
<li>Without exception line 2, 4 are executed.</li>
<li>With exception line 2, 6 are executed.</li>
<li>Affected vars are <code>cert</code> and <code>LOG</code>.</li>
</ul>
<h2 id="compute-the-propagation-of-a_e">Compute the Propagation of <span
class="math inline"><em>A</em><sub><em>e</em></sub></span></h2>
<h3 id="static-analysis">Static Analysis</h3>
<p>Idea: Use static data-flow analysis to identify the taint
relationships offline.</p>
<p>Challenges 1: what is the entry point of each program:</p>
<ul>
<li>Pattern 1:
<ul>
<li>Exceptions happen in the same thread, same execution</li>
<li>Exceptions happen in different threads, different execution</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb14"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">class</span> Loader <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2"></a>    <span class="dt">int</span> totalCommits <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="co">// Entry point 1</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    <span class="dt">void</span> <span class="fu">recoverRequest</span><span class="op">(</span>Checkpoint checkpoints<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>        <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>            <span class="cf">for</span> <span class="op">(</span>commit<span class="op">:</span> checkpoints<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-7"><a href="#cb14-7"></a>                <span class="cf">if</span> <span class="op">(</span>condition<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>                    <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">OOMException</span><span class="op">();</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>                <span class="op">}</span></span>
<span id="cb14-10"><a href="#cb14-10"></a>                totalCommits<span class="op">++;</span></span>
<span id="cb14-11"><a href="#cb14-11"></a>            <span class="op">}</span></span>
<span id="cb14-12"><a href="#cb14-12"></a>        <span class="op">}</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>        <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-14"><a href="#cb14-14"></a>            LOG<span class="op">.</span><span class="fu">error</span><span class="op">(</span>e<span class="op">);</span></span>
<span id="cb14-15"><a href="#cb14-15"></a>        <span class="op">}</span></span>
<span id="cb14-16"><a href="#cb14-16"></a>    <span class="op">}</span></span>
<span id="cb14-17"><a href="#cb14-17"></a></span>
<span id="cb14-18"><a href="#cb14-18"></a>    <span class="co">// Entry point 2</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>    <span class="dt">void</span> <span class="fu">commitRequest</span><span class="op">(</span><span class="dt">int</span> id<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>        <span class="fu">checkId</span><span class="op">(</span>id<span class="op">,</span> totalCommits<span class="op">);</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>        <span class="co">//...</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>        totalCommits<span class="op">++;</span></span>
<span id="cb14-23"><a href="#cb14-23"></a>    <span class="op">}</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="dt">void</span> <span class="fu">checkId</span><span class="op">(</span><span class="dt">int</span> id<span class="op">,</span> <span class="dt">int</span> totalCommits<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>        <span class="cf">if</span> <span class="op">(</span>id <span class="op">!=</span> totalCommits<span class="op">+</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>            <span class="cf">throw</span> <span class="kw">new</span> <span class="fu">InconsistentIdException</span><span class="op">();</span></span>
<span id="cb14-27"><a href="#cb14-27"></a>        <span class="op">}</span></span>
<span id="cb14-28"><a href="#cb14-28"></a>    <span class="op">}</span></span>
<span id="cb14-29"><a href="#cb14-29"></a><span class="op">}</span></span></code></pre></div>
<p>Challenge 2: how to model collections?</p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb15-1"><a href="#cb15-1"></a><span class="dt">void</span> <span class="fu">tes1</span><span class="op">(</span><span class="bu">Object</span><span class="op">[]</span> a<span class="op">)</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb15-3"><a href="#cb15-3"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Exception</span><span class="op">();</span></span>
<span id="cb15-4"><a href="#cb15-4"></a>        a<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="kw">null</span><span class="op">;</span> <span class="co">// a[1] is affected var</span></span>
<span id="cb15-5"><a href="#cb15-5"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">Exception</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb15-6"><a href="#cb15-6"></a>    <span class="op">}</span></span>
<span id="cb15-7"><a href="#cb15-7"></a></span>
<span id="cb15-8"><a href="#cb15-8"></a>    a<span class="op">[</span><span class="dv">2</span><span class="op">].</span><span class="fu">callMethod</span><span class="op">();</span> <span class="co">// throws NPE. a[2] is source var.</span></span>
<span id="cb15-9"><a href="#cb15-9"></a><span class="op">}</span></span></code></pre></div>
<p>Other implementation level challenges:</p>
<p>Challenge 3: how to model function calls?</p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode numberSource java numberLines lineAnchors"><code class="sourceCode java"><span id="cb16-1"><a href="#cb16-1"></a><span class="dt">void</span> <span class="fu">foo</span><span class="op">(</span><span class="bu">Object</span> a<span class="op">)</span> <span class="op">{</span></span>
<span id="cb16-2"><a href="#cb16-2"></a>    <span class="cf">if</span> <span class="op">(</span>condition<span class="op">)</span> <span class="op">{</span></span>
<span id="cb16-3"><a href="#cb16-3"></a>        <span class="fu">foo</span><span class="op">(</span>a<span class="op">);</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>    <span class="op">}</span></span>
<span id="cb16-5"><a href="#cb16-5"></a>    <span class="co">// a is tainted here</span></span>
<span id="cb16-6"><a href="#cb16-6"></a>    <span class="bu">Object</span> b <span class="op">=</span> a<span class="op">;</span></span>
<span id="cb16-7"><a href="#cb16-7"></a>    <span class="co">// ...</span></span>
<span id="cb16-8"><a href="#cb16-8"></a><span class="op">}</span></span></code></pre></div>
<p>Algorithm</p>
<ul>
<li><p>Lattice: a set of exception labels.</p>
<ul>
<li>Top: all exceptions</li>
<li>Bot: empty set</li>
</ul></li>
<li><p>Pros:</p>
<ul>
<li>The algorithm is performed offline. Overhead is low.</li>
</ul></li>
<li><p>Cons:</p>
<ul>
<li>False positives</li>
</ul></li>
</ul>
<h3 id="dynamic-taint-analysis">Dynamic Taint Analysis</h3>
<p>Idea: taint all affected variables <span
class="math inline"><em>A</em></span> with exception ID.</p>
<ul>
<li>Pros
<ul>
<li>Available taint analysis framework</li>
</ul></li>
<li>Cons
<ul>
<li>High overhead (&gt; 400%)</li>
</ul></li>
</ul>
<h1 id="oct-2">Oct 2</h1>
<ul>
<li><p>Analyzed Hadoop HDFS-4128</p>
<ul>
<li>SecondaryNameNode is a background service that runs
periodically</li>
<li>By default, it runs the checkout method every ~30min.</li>
<li>There is an execution where an exception makes the service into bad
stats.</li>
<li>In the following execution the service crashes.</li>
</ul></li>
<li><p>Simulation environment:</p>
<ul>
<li>We force the SecondaryNameNode to run two consecutive
checkouts.</li>
<li>In the first execution we inject the error.</li>
<li>In the second execution we observe the crash.</li>
</ul></li>
<li><p>Raw logging:</p></li>
</ul>
<!-- -->

<pre><code>ClassNotFoundException 11041
FileNotFoundException 17
IOException 24
UnsatisfiedLinkError 1
NoSuchMethodException 12
NoSuchMethodError 2
MalformedURLException 4
ConfigurationException 1
NoSuchFieldException 1
NotCompliantMBeanException 18
UnixException 327
NoSuchFileException 133
RuntimeException 5
XMLEntityScanner$1 4
UnsupportedOperationException 1
InvocationTargetException 1
SecurityException 2
UnknownHostException 1
BlockPlacementPolicy$NotEnoughReplicasException 2
MissingResourceException 1
EOFException 1
InterruptedException 198
AsynchronousCloseException 20</code></pre>
<ul>
<li>We apply the following filters:
<ul>
<li>discard exceptions that are caught inside JDK</li>
<li>discard exceptions that does not affect the state of the program
<ul>
<li>Exception does not affect the value of any local variables</li>
<li>Exception does not affect the value of global variables</li>
</ul></li>
</ul></li>
</ul>
<!-- -->

<pre><code>java.io.FileNotFoundException 8
java.lang.ClassNotFoundException 2
java.io.IOException 10
java.lang.NoSuchMethodException 5
java.net.MalformedURLException 2
org.apache.commons.configuration2.ex.ConfigurationException 1
java.nio.file.NoSuchFileException 5
java.lang.RuntimeException 5
java.lang.UnsupportedOperationException 1
java.lang.reflect.InvocationTargetException 1
java.lang.SecurityException 2
org.apache.hadoop.hdfs.server.blockmanagement.BlockPlacementPolicy$NotEnoughReplicasException 2
java.lang.InterruptedException 14
Total: 58</code></pre>
<ul>
<li><p>For each exception that affects the state of the program:</p>
<ul>
<li>Affected local objects: 1.96</li>
<li>Affected local arrays 0.02</li>
<li>Affected local primitives: 0.14</li>
<li>Affected local objects that are null: 0.38</li>
<li>Affected class fields: 1.14</li>
</ul></li>
<li><p>Most affected variables are objects and fields</p>
<ul>
<li>Static analysis are bad at tracking global information (class
fields).</li>
<li>But they are really good at tracking local information (local
variables).</li>
</ul></li>
<li><p>The number of affected primitives and nulls are small</p>
<ul>
<li>But are they important?</li>
<li>Maybe worth to go to examples.</li>
</ul></li>
<li><p>During the exception collection:</p>
<ul>
<li>It is hard to distinguish which exception belongs to which
request/execution</li>
</ul></li>
</ul>
<p>TODOS:</p>
<ul>
<li>We still don’t know how affected variables propagates in the
system</li>
<li>Implement static data-flow analysis</li>
</ul>
<h1 id="oct-10">Oct 10</h1>
<ul>
<li><p>We have finished implementing the static data flow analysis</p>
<ul>
<li>Identify and taint affected global variables ✅</li>
<li>Identify and taint affected local variables 🚧</li>
<li>Propagate taint variables through local variables ✅</li>
<li>Propagate taint variables through global variables ✅</li>
</ul></li>
<li><p>Taint Propagation Algorithm:</p>
<ul>
<li><span class="math inline"><em>G</em></span> a global context that
saves the tags for method parameters.</li>
<li><span class="math inline"><em>R</em></span> a global context that
saves the tags for method returns.</li>
<li><span class="math inline"><em>D</em></span> a dependency graph that
saves all callers of a method <span
class="math inline"><em>m</em></span></li>
<li>Input: A method <span
class="math inline"><em>m</em><sub><em>i</em><em>n</em></sub></span>
that throws an exception <span class="math inline"><em>e</em></span>, a
set of affected variables <span
class="math inline"><em>V</em></span>,</li>
<li>Initialize the work list <span
class="math inline"><em>W</em> ← {<em>m</em><sub><em>i</em><em>n</em></sub>}</span></li>
<li>If <span class="math inline"><em>W</em> ≠ ∅</span>
<ul>
<li>Remove an element <span class="math inline"><em>m</em></span> from
<span class="math inline"><em>W</em></span></li>
<li>For statement <span class="math inline"><em>s</em></span> in <span
class="math inline"><em>m</em></span>
<ul>
<li>case <span
class="math inline"><em>s</em> = <em>v</em><sub>1</sub> := <em>v</em><sub>2</sub></span>
<ul>
<li>If <span class="math inline"><em>v</em><sub>2</sub></span> is
parameter:
<ul>
<li><span
class="math inline"><em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub> ← <em>G</em>[<em>v</em><sub>2</sub>]</span></li>
</ul></li>
<li>Else
<ul>
<li><span
class="math inline"><em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub> ← <em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>2</sub></sub></span></li>
</ul></li>
<li>If <span
class="math inline"><em>v</em><sub>1</sub> ∈ <em>V</em></span>:
<ul>
<li><span
class="math inline"><em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub> ← <em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub> ∪ {<em>e</em>}</span></li>
</ul></li>
</ul></li>
<li>case <span
class="math inline"><em>s</em> = <em>v</em> := <em>f</em>(<em>v</em><sub>1</sub>)</span>
<ul>
<li>If <span
class="math inline"><em>G</em>[<em>v</em><sub>1</sub>] ∪ <em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub> ≠ <em>G</em>[<em>v</em><sub>1</sub>]</span>:
<ul>
<li><span
class="math inline"><em>G</em>[<em>v</em><sub>1</sub>] ← <em>G</em>[<em>v</em><sub>1</sub>] ∪ <em>t</em><em>a</em><em>g</em><sub><em>v</em><sub>1</sub></sub></span></li>
<li><span
class="math inline"><em>W</em> ← <em>W</em> ∪ {<em>f</em>}</span></li>
</ul></li>
<li><span
class="math inline"><em>t</em><em>a</em><em>g</em><sub><em>v</em></sub> ← <em>R</em>[<em>f</em>]</span></li>
</ul></li>
<li>case <span class="math inline"><em>s</em> = return <em>v</em></span>
<ul>
<li>If <span
class="math inline"><em>R</em>[<em>m</em>] ∪ <em>t</em><em>a</em><em>g</em><sub><em>v</em></sub> ≠ <em>R</em>[<em>m</em>]</span>:
<ul>
<li><span
class="math inline"><em>R</em>[<em>m</em>] ← <em>R</em>[<em>m</em>] ∪ <em>t</em><em>a</em><em>g</em><sub><em>v</em></sub></span></li>
<li>for <span
class="math inline"><em>m</em>′ ∈ <em>D</em>[<em>m</em>]</span>
<ul>
<li><span
class="math inline"><em>W</em> ← <em>W</em> ∪ {<em>m</em>′}</span></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>Issues:
<ul>
<li>We assume methods are pure functional (we ignore global variables,
and side effects of function parameters)</li>
</ul></li>
</ul></li>
<li><p>Implementation challenges:</p>
<ul>
<li>Mapping between static information and dynamic information
<ul>
<li>Bytecode offset v.s. line number
<ul>
<li>Runtime: bytecode offset (which instruction throws the
exception)</li>
<li>Static: Soot does not preserve bytecode offset.
<ul>
<li>https://www.sable.mcgill.ca/soot/tutorial/usage/</li>
</ul></li>
<li>Solution
<ul>
<li>not sure if it is because I’m using Jimple representation. I’ll try
to use shimple to see if it works</li>
<li>Use ASM and debug information to construct the mapping between
bytecode offset and line numbers.</li>
</ul></li>
</ul></li>
<li>Stack index v.s. variable name</li>
</ul></li>
</ul></li>
</ul>
<h1 id="oct-17">Oct 17</h1>
<ul>
<li>We use Soot InfoFlow to conduct static taint analysis.
<ul>
<li>Context-insensitive</li>
<li>Aggressive time and memory constraints</li>
</ul></li>
<li>We successfully analyzed HDFS (HDFS-4128) and Fineract ()
<ul>
<li>Fineract:
<ul>
<li>Still running</li>
<li>117 false positives
<ul>
<li>4 after deduplicate</li>
</ul></li>
<li>4888 exceptions thrown</li>
<li>3644 exceptions affects the state of the program</li>
<li>If the exception affects the state of the program, on average, each
exception causes 8 affected local variable, 5 affected class fields</li>
</ul></li>
<li>HDFS:
<ul>
<li>139 exceptions thrown</li>
<li>125 exceptions affects the state of the program</li>
<li>If the exception affects the state of the program, on average, each
exception causes 5 affected local variable, 2 affected class fields</li>
<li>0 false positive reported!</li>
</ul></li>
</ul></li>
</ul>
<h2 id="false-relations">False Relations</h2>
<ul>
<li>There are two sources of false positives:</li>
<li>Source 1: the propagation happens, but the propagation is not the
root cause of the exceptions
<ul>
<li>Inaccurate affected/source var identification</li>
<li>Solution: collect more false positives, label them based on domain
knowledge</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb19"><pre
class="sourceCode java"><code class="sourceCode java"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">firstException</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//...</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>error<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">RuntimeException</span><span class="op">();</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//...</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    logger<span class="op">.</span><span class="fu">info</span><span class="op">(</span><span class="st">&quot;Finished&quot;</span><span class="op">);</span> <span class="co">// logger is identified as affected field</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">secondException</span><span class="op">(</span><span class="bu">String</span> info<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>logger <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span>  <span class="co">// logger is identified as source field</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        logger<span class="op">.</span><span class="fu">error</span><span class="op">(</span>info<span class="op">);</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">RuntimeException</span><span class="op">(</span>info<span class="op">);</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Note: I didn’t reproduce the exception manually so it is unclear if
the <code>logger</code> object in two methods points to the same heap
object.</p>
<ul>
<li>Source 2: the propagation does not happen.
<ul>
<li>In accurate static taint analysis</li>
<li>Candidate solution: can we prune out those impossible</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb20"><pre
class="sourceCode java"><code class="sourceCode java"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">process</span><span class="op">()</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">((</span>i <span class="op">=</span> inputStream<span class="op">.</span><span class="fu">read</span><span class="op">(</span>nextCharBuf<span class="op">,</span> maxNextCharInd<span class="op">,</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>                                        <span class="dv">4096</span> <span class="op">-</span> maxNextCharInd<span class="op">))</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span> <span class="co">// maxNextCharInd is source Var</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> java<span class="op">.</span><span class="fu">io</span><span class="op">.</span><span class="fu">IOException</span><span class="op">();</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>        maxNextCharInd <span class="op">+=</span> i<span class="op">;</span> <span class="co">// maxNextCharInd is affected field</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span><span class="op">;</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="fu">read</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span><span class="kw">true</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>        <span class="fu">process</span><span class="op">();</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</body>
</html>
